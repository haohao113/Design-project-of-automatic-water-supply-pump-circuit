;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <alcd.h>
;#include <stdio.h>
;
;#define F_CPU 8000000UL
;
;#define ADC_VREF_TYPE ((0 << REFS1) | (1 << REFS0) | (0 << ADLAR))
;
;#define TRIG_PIN 0
;#define ECHO_PIN 1
;
;#define BUTTON2 2
;#define BUTTON4 5
;#define BUTTON3 4
;#define BUTTON1 3
;
;#define PUMP_PIN 2
;
;#define AUTO_MODE 1
;#define MANUAL_MODE 0
;
;#define PUMP_OFF 1
;#define PUMP_ON 0
;
;#define MIN_WATER_LEVEL 15 // Gi? s? m?c nu?c t?i thi?u là 20 cm
;#define MAX_WATER_LEVEL 5 // Gi? s? m?c nu?c t?i da là 10 cm
;
;#define MODE_DISTANCE 0
;#define MODE_AUTO_MANUAL 1
;#define MODE_MIN_LEVEL 2
;#define MODE_MAX_LEVEL 3
;
;unsigned char mode = 0;
;char buffer[16];
;
;#define TIMEOUT 10000 // Adjust this value as needed
;
;unsigned char mode1 = 0;
;unsigned char pump_status = PUMP_OFF;
;unsigned int min_water_level = MIN_WATER_LEVEL;
;unsigned int max_water_level = MAX_WATER_LEVEL;
;unsigned int water_level;
;void ADC_init()
; 0000 002D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002E     // Ch?n AVCC làm di?n áp tham chi?u, không kích ho?t ch?c nang left adjust
; 0000 002F     ADMUX = (1 << REFS0);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0030 
; 0000 0031     // Kích ho?t ADC, ch?n ch? d? chuy?n d?i liên t?c, ch?n ch? d? chuy?n d?i t? d?ng
; 0000 0032     ADCSRA = (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0033 
; 0000 0034     // Ch?n ch? d? chia t? l? 64 (8MHz / 64 = 125kHz)
; 0000 0035     ADCSRA |= (1 << ADPS2) | (1 << ADPS1);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0036 }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;unsigned int read_ADC(unsigned char adc_input)
; 0000 0038 {
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0039     ADMUX = adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $0000001A VOL: 0
;	adc_input -> Y+0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 003A     // B?t d?u chuy?n d?i
; 0000 003B     ADCSRA |= (1 << ADSC);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 003C     // Ch? cho d?n khi chuy?n d?i hoàn t?t
; 0000 003D     while ((ADCSRA & (1 << ADIF)) == 0)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 003E         ;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 003F     ADCSRA |= (1 << ADIF);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0040     return ADCW;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0041 }
;PCODE: $0000002B VOL: 0
;unsigned int measure_water_level()
; 0000 0043 {
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0044     unsigned long echo_time;
; 0000 0045     unsigned int distance;
; 0000 0046     unsigned long timeout;
; 0000 0047 
; 0000 0048     DDRD |= (1 << TRIG_PIN);   // Set TRIG_PIN as output
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;	echo_time -> Y+6
;	distance -> R16,R17
;	timeout -> Y+2
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0049     DDRD &= ~(1 << ECHO_PIN);  // Set ECHO_PIN as input
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 004A     PORTD &= ~(1 << TRIG_PIN); // Set TRIG_PIN to 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 004B 
; 0000 004C     delay_us(2);
;PCODE: $00000037 VOL: 0
; 0000 004D     PORTD |= (1 << TRIG_PIN); // Set TRIG_PIN to 1
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 004E     delay_us(10);
;PCODE: $0000003A VOL: 0
; 0000 004F     PORTD &= ~(1 << TRIG_PIN); // Set TRIG_PIN to 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0050     timeout = 0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0051     while (!(PIND & (1 << ECHO_PIN)) && timeout < TIMEOUT)
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0052     {
; 0000 0053         timeout++;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0054     }
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0055     if (timeout >= TIMEOUT)
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0056     {
; 0000 0057         // Handle timeout error here
; 0000 0058         return 0;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0059     }
; 0000 005A     TCNT1 = 0;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 005B     TCCR1B = (1 << CS10); // Use prescaler 8 with 8MHz crystal
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 005C     timeout = 0;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 005D     while ((PIND & (1 << ECHO_PIN)) && timeout < TIMEOUT)
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 005E     {
; 0000 005F         timeout++;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0060     }
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0061     if (timeout >= TIMEOUT)
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0062     {
; 0000 0063         // Handle timeout error here
; 0000 0064         return 0;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0065     }
; 0000 0066     TCCR1B = 0;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0067     echo_time = TCNT1;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0068     distance = (unsigned int)((echo_time / 232.8) / 2); // Convert time to distance
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0069     return distance;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 006A }
;PCODE: $00000091 VOL: 0
;void display_mode()
; 0000 006C {
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 006D     lcd_clear();
;PCODE: $00000094 VOL: 0
; 0000 006E     lcd_gotoxy(0, 0);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 006F     if (mode1 == AUTO_MODE)
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0070     {
; 0000 0071         lcd_putsf("Mode: AUTO");
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0072     }
; 0000 0073     else
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0074     {
; 0000 0075         lcd_putsf("Mode: MANUAL");
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0076     }
;PCODE: $000000A4 VOL: 0
; 0000 0077 }
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;void display_min_max()
; 0000 0079 {
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 007A     char buffer[16];
; 0000 007B     lcd_gotoxy(0, 1);
;PCODE: $000000A9 VOL: 0
;	buffer -> Y+0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 007C     lcd_putsf("Min: ");
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 007D     sprintf(buffer, "%d", min_water_level);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 007E     lcd_puts(buffer);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 007F     lcd_putsf("Max: ");
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0080     sprintf(buffer, "%d", max_water_level);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0081     lcd_puts(buffer);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0082 }
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;void display_distance(unsigned int distance)
; 0000 0084 {
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0085     char buffer[16];
; 0000 0086     lcd_clear();
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;	distance -> Y+16
;	buffer -> Y+0
;PCODE: $000000D7 VOL: 0
; 0000 0087     lcd_gotoxy(0, 0);
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0088     lcd_putsf("Distance: ");
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0089     sprintf(buffer, "%d cm", distance);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 008A     lcd_puts(buffer);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 008B }
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;
;void main(void)
; 0000 008E {
;PCODE: $000000F0 VOL: 0
; 0000 008F     DDRD &= ~(1 << BUTTON2);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0090     PORTD |= (1 << BUTTON2); // Enable pull-up resistor for BUTTON2
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0091 
; 0000 0092     DDRD &= ~(1 << BUTTON4);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0093     PORTD |= (1 << BUTTON4); // Enable pull-up resistor for BUTTON4
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0094 
; 0000 0095     DDRD &= ~(1 << BUTTON3);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0096     PORTD |= (1 << BUTTON3); // Enable pull-up resistor for BUTTON3
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0097 
; 0000 0098     DDRD &= ~(1 << BUTTON1);
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0099     PORTD |= (1 << BUTTON1); // Enable pull-up resistor for BUTTON1
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 009A 
; 0000 009B     DDRB |= (1 << PUMP_PIN);
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 009C     PORTB |= (1 << PUMP_PIN);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 009D 
; 0000 009E     // Configure Timer1 in Normal mode and use prescaler 1
; 0000 009F     TCCR1A = 0;           // Normal mode
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00A0     TCCR1B = (1 << CS10); // Use prescaler 1
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00A1 
; 0000 00A2     ADC_init();
;PCODE: $00000109 VOL: 0
; 0000 00A3     lcd_init(16);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00A4 
; 0000 00A5     while (1)
;PCODE: $0000010C VOL: 0
; 0000 00A6     {
; 0000 00A7         if ((PIND & (1 << BUTTON2)) == 0)
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00A8         {
; 0000 00A9             mode++;
;PCODE: $00000110 VOL: 0
; 0000 00AA             if (mode > 3)
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00AB             {
; 0000 00AC                 mode = 0;
;PCODE: $00000114 VOL: 0
; 0000 00AD             }
; 0000 00AE             while ((PIND & (1 << BUTTON2)) == 0);
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00AF         }
; 0000 00B0         switch (mode)
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00B1         {
; 0000 00B2         case MODE_DISTANCE:
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00B3             water_level = measure_water_level();
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00B4             display_distance(water_level);
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00B5             display_min_max();
;PCODE: $00000125 VOL: 0
; 0000 00B6             delay_ms(100);
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00B7             break;
;PCODE: $00000129 VOL: 0
; 0000 00B8         case MODE_AUTO_MANUAL:
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00B9             display_mode();
;PCODE: $0000012D VOL: 0
; 0000 00BA             if ((PIND & (1 << BUTTON4)) == 0)
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00BB             {
; 0000 00BC                 mode1 = !mode1;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00BD                 display_mode();
;PCODE: $00000134 VOL: 0
; 0000 00BE                 while ((PIND & (1 << BUTTON4)) == 0);
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00BF             }
; 0000 00C0             break;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00C1         case MODE_MIN_LEVEL:
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00C2             display_min_max();
;PCODE: $00000140 VOL: 0
; 0000 00C3             if ((PIND & (1 << BUTTON4)) == 0)
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00C4             {
; 0000 00C5                 if (min_water_level > MAX_WATER_LEVEL)
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00C6                     min_water_level--;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00C7                 lcd_clear();
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00C8                 lcd_gotoxy(0, 1);
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00C9                 lcd_putsf("Min: ");
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00CA                 sprintf(buffer, "%d", min_water_level);
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00CB                 lcd_puts(buffer);
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00CC                 while ((PIND & (1 << BUTTON4)) == 0);
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00CD             }
; 0000 00CE             if ((PIND & (1 << BUTTON3)) == 0)
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00CF             {
; 0000 00D0                 min_water_level++;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 00D1                 lcd_clear();
;PCODE: $0000016E VOL: 0
; 0000 00D2                 lcd_gotoxy(0, 1);
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00D3                 lcd_putsf("Min: ");
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00D4                 sprintf(buffer, "%d", min_water_level);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 00D5                 lcd_puts(buffer);
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 00D6                 while ((PIND & (1 << BUTTON3)) == 0);
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 00D7             }
; 0000 00D8             break;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 00D9         case MODE_MAX_LEVEL:
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00DA             display_min_max();
;PCODE: $0000018F VOL: 0
; 0000 00DB             if ((PIND & (1 << BUTTON4)) == 0)
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 00DC             {
; 0000 00DD                 max_water_level--;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 00DE                 lcd_clear();
;PCODE: $00000196 VOL: 0
; 0000 00DF                 lcd_gotoxy(7, 1);
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 00E0                 lcd_putsf("Max: ");
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 00E1                 sprintf(buffer, "%d", max_water_level);
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 00E2                 lcd_puts(buffer);
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 00E3                 while ((PIND & (1 << BUTTON4)) == 0);
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 00E4             }
; 0000 00E5             if ((PIND & (1 << BUTTON3)) == 0)
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 00E6             {
; 0000 00E7                 if (max_water_level < MIN_WATER_LEVEL)
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 00E8                     max_water_level++;
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 00E9                 lcd_clear();
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 00EA                 lcd_gotoxy(7, 1);
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 00EB                 lcd_putsf("Max: ");
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 00EC                 sprintf(buffer, "%d", max_water_level);
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 00ED                 lcd_puts(buffer);
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 00EE                 while ((PIND & (1 << BUTTON3)) == 0);
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 00EF             }
; 0000 00F0             break;
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 00F1         }
;PCODE: $000001DB VOL: 0
; 0000 00F2         if (mode1 == AUTO_MODE)
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 00F3         {
; 0000 00F4             if (water_level >= min_water_level)
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 00F5             {
; 0000 00F6                 pump_status = PUMP_ON;
;PCODE: $000001E2 VOL: 0
; 0000 00F7             }
; 0000 00F8             else if (water_level <= max_water_level)
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 00F9             {
; 0000 00FA                 pump_status = PUMP_OFF;
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 00FB             }
; 0000 00FC         }
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 00FD         else if (mode1 == MANUAL_MODE)
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 00FE         {
; 0000 00FF             if ((PIND & (1 << BUTTON1)) == 0)
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 0100             {
; 0000 0101                 pump_status = !pump_status;
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 0102                 while ((PIND & (1 << BUTTON1)) == 0);
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 0103             }
; 0000 0104             if (water_level <= max_water_level && pump_status == PUMP_ON)
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 0105             {
; 0000 0106                 pump_status = PUMP_OFF;
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 0107             }
; 0000 0108         }
;PCODE: $00000208 VOL: 0
; 0000 0109         if (pump_status == PUMP_ON)
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 010A         {
; 0000 010B             PORTB &= ~(1 << PUMP_PIN); // Turn on the pump
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 010C         }
; 0000 010D         else
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 010E         {
; 0000 010F             PORTB |= (1 << PUMP_PIN); // Turn off the pump
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 0110         }
;PCODE: $00000213 VOL: 0
; 0000 0111         delay_ms(50);
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 0112     }
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 0113 }
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;
;
;
